import json
from gettext import find
from io import BytesIO

import telebot
from telebot import types
import requests
import bs4
import random
from time import sleep

import BotGames
from menuBot import Menu, Users
import DZ

bot = telebot.TeleBot('5417103430:AAETfsgEYHpEct91fQJqeH61eL53eRmF4RY')
game21 = None


def inputBot(message, text):
    a = []

    def ret(message):
        a.clear()
        a.append(message.text)
        return False

    a.clear()
    mes = bot.send_message(message.chat.id, text)
    bot.register_next_step_handler(message, ret)
    while a == []:
        pass
    return a[0]


@bot.message_handler(commands="start")
def command(message, res=False):
    chat_id = message.chat.id
    txt_message = f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –Ø —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –ú–∏—Ö–∞–∏–ª–∞ –Ω–∞ —è–∑—ã–∫–µ Python"
    bot.send_message(chat_id, text=txt_message, reply_markup=Menu.getMenu(chat_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é").markup)


@bot.message_handler(content_types=['sticker'])
def get_messages(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, "–≠—Ç–æ " + message.content_type)


@bot.message_handler(content_types=['audio'])
def get_messages(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, "–≠—Ç–æ " + message.content_type)

    audio = message.audio
    bot.send_message(chat_id, audio)


@bot.message_handler(content_types=['voice'])
def get_messages(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, "–≠—Ç–æ " + message.content_type)

    voice = message.voice
    bot.send_message(message.chat.id, voice)


@bot.message_handler(content_types=['photo'])
def get_messages(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, "–≠—Ç–æ " + message.content_type)

    photo = message.photo
    bot.send_message(message.chat.id, photo)


@bot.message_handler(content_types=['video'])
def get_messages(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, "–≠—Ç–æ " + message.content_type)

    video = message.video
    bot.send_message(message.chat.id, video)


@bot.message_handler(content_types=['document'])
def get_messages(message):
    chat_id = message.chat.id
    mime_type = message.document.mime_type
    bot.send_message(chat_id, "–≠—Ç–æ " + message.content_type + " (" + mime_type + ")")

    document = message.document
    bot.send_message(message.chat.id, document)
    if message.document.mime_type == "video/mp4":
        bot.send_message(message.chat.id, "This is a GIF!")


@bot.message_handler(content_types=['location'])
def get_messages(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, "–≠—Ç–æ " + message.content_type)

    location = message.location
    bot.send_message(message.chat.id, location)


@bot.message_handler(content_types=['contact'])
def get_messages(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, "–≠—Ç–æ " + message.content_type)

    contact = message.contact
    bot.send_message(message.chat.id, contact)


@bot.message_handler(content_types=['text'])
def get_text_messages(message):
    global game21

    chat_id = message.chat.id
    ms_text = message.text

    cur_user = Users.getUser(chat_id)
    if cur_user == None:
        cur_user = Users(chat_id, message.json["from"])

    result = goto_menu(chat_id, ms_text)
    if result:
        return

    cur_menu = Menu.getCurMenu(chat_id)
    if cur_menu != None and ms_text in cur_menu.buttons:
        cur_user.set_cur_menu(ms_text)

        if ms_text == "üìö –ü–æ–º–æ—â—å":
            send_help(chat_id)

        elif ms_text == "–ü—Ä–∏–¥—É–º–∞—Ç—å –Ω–∏–∫":
            bot.send_message(chat_id, text=get_nickname())

        elif ms_text == '–ü–æ–∂–∞–ª—É–π –ù–µ—Ç':
            goto_menu(chat_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

        elif ms_text == "<--–ù–∞–∂–∏–º–∞–π":
            bot.send_message(chat_id, "–î–∞ –Ω–µ —Å—É–¥–∞ –ö—Ä–∏–≤–æ—Ä—É–∫–∏–π")

        elif ms_text == "–ù–∞–∂–∏–º–∞–π-->":
            bot.send_message(chat_id, "–î–∞ –Ω–µ —Å—É–¥–∞ –ö—Ä–∏–≤–æ—Ä—É–∫–∏–π")

        elif ms_text == '–î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º':
            bot.send_message(chat_id, "–î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É")

        elif ms_text == "üê∂ –ü—Ä–∏—Å–ª–∞—Ç—å —Å–æ–±–∞–∫—É":
            bot.send_photo(chat_id, photo=get_dogURL(), caption="–í–æ—Ç —Ç–µ–±–µ —Å–æ–±–∞—á–∫–∞")

        elif ms_text == "üòÖ –ü—Ä–∏—Å–ª–∞—Ç—å –∞–Ω–µ–∫–¥–æ—Ç":
            bot.send_message(chat_id, text=get_anekdot())

        elif ms_text == "üé¨ –ü—Ä–∏—Å–ª–∞—Ç—å —Ñ–∏–ª—å–º":
            send_film(chat_id)

        elif ms_text == "üéÆ –°–ª—É—á–∞–π–Ω–∞—è –∏–≥—Ä–∞":
            bot.send_message(chat_id, text=get_game())

        elif ms_text == "‚åõ –†–∞–Ω–¥–æ–º–Ω–æ–µ –ê–Ω–∏–º–µ!!!":
            result_find_name, result_find_in, im = get_anime()
            bot.send_message(chat_id, result_find_name)
            bot.send_photo(chat_id, photo=(im[0]))
            bot.send_message(chat_id, result_find_in)

        elif ms_text == "–ü—Ä–∏—Å–ª–∞—Ç—å –∫—É—Ä—Å —ç—Ñ–∏—Ä–∞":
            get_eth()
            bot.send_message(chat_id, text=get_eth())

        elif ms_text == "–ü—Ä–∏—Å–ª–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –≥–∞–∑–∞":
            get_gas()
            bot.send_message(chat_id, text=get_gas())

        elif ms_text == "–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É":
            city = inputBot(message, text='–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥')

            r = requests.get(
                'http://api.openweathermap.org/data/2.5/weather?&units=metric&q=%s&appid=0c9f3c052f1d81b7062750ff0926f345' % (
                    city))
            data = r.json()
            temp = data["main"]["temp"]
            bot.send_message(chat_id, text='–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ ' + str(city) + ':' + str(temp) + '¬∞C')



        elif ms_text in BotGames.GameRPS.values:
            bot.send_message(chat_id, text="–ñ–¥–µ–º –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞...")
            for _ in range(10):
                text_game = ""
                for user in Users.activeUsers.values():
                    if cur_user.get_cur_enemy():
                        user = cur_user.get_cur_enemy()
                    if user.id != cur_user.id and user.get_cur_menu() in BotGames.GameRPS.values:
                        user.set_cur_enemy(cur_user)
                        enemy_value = user.get_cur_menu()
                        bot.send_message(chat_id, text="–¢–≤–æ–π –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ - @{enemy}".format(enemy=user.userName))
                        gameRSP = BotGames.getGame(chat_id)
                        if gameRSP == None:
                            goto_menu(chat_id, "–í—ã—Ö–æ–¥")
                            return
                        text_game = gameRSP.onlineRPS(ms_text, enemy_value)
                        bot.send_message(chat_id, text=text_game)
                        gameRSP.newGame()
                        break
                if text_game:
                    break
                sleep(1)
            if not text_game:
                bot.send_message(chat_id, text="–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω :–°")
            sleep(1)
            cur_user.set_cur_menu("")
            cur_user.set_cur_enemy("")




        elif ms_text == "–ó–∞–¥–∞–Ω–∏–µ 1":
            DZ.dz1(bot, chat_id)
        elif ms_text == "–ó–∞–¥–∞–Ω–∏–µ 2":
            DZ.dz2(bot, chat_id)
        elif ms_text == "–ó–∞–¥–∞–Ω–∏–µ 3":
            DZ.dz3(bot, chat_id)
        elif ms_text == "–ó–∞–¥–∞–Ω–∏–µ 4,5":
            DZ.dz45(bot, chat_id)
        elif ms_text == "–ó–∞–¥–∞–Ω–∏–µ 6":
            DZ.dz6(bot, chat_id)
        elif ms_text == "–ó–∞–¥–∞–Ω–∏–µ 7.1":
            DZ.dz7n(bot, chat_id)
        elif ms_text == "–ó–∞–¥–∞–Ω–∏–µ 7.2":
            DZ.dz7a(bot, chat_id)
        elif ms_text == "–ó–∞–¥–∞–Ω–∏–µ 8":
            DZ.dz8(bot, chat_id)
        elif ms_text == "–ó–∞–¥–∞–Ω–∏–µ 9.1":
            DZ.dz91(bot, chat_id)
        elif ms_text == "–ó–∞–¥–∞–Ω–∏–µ 9.2":
            DZ.dz92(bot, chat_id)
        elif ms_text == "–ó–∞–¥–∞–Ω–∏–µ 10":
            DZ.dz10(bot, chat_id)

        elif ms_text == "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É":
            koloda = [6, 7, 8, 9, 10, 2, 3, 4, 11] * 4
            random.shuffle(koloda)
            count = 0
            countd = 0
            a = 0

            while True:
                choice = inputBot(message, text='–ë—É–¥–µ—Ç–µ –±—Ä–∞—Ç—å –∫–∞—Ä—Ç—É?')
                if choice == '–î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º':
                    current = koloda.pop()
                    bot.send_message(chat_id, '–í–∞–º –ø–æ–ø–∞–ª–∞—Å—å –∫–∞—Ä—Ç–∞ –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–æ–º %d' % current)
                    count += current
                    random.shuffle(koloda)
                    a = a + 1
                    if count > 21:
                        bot.send_message(chat_id, '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ > 21')
                        goto_menu(chat_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
                        break
                    elif count == 21:
                        bot.send_message(chat_id, '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –£ –≤–∞—Å –ë–ª—ç–î–∂–µ–∫')
                        goto_menu(chat_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
                        break
                    else:
                        bot.send_message(chat_id, '–£ –≤–∞—Å %d –æ—á–∫–æ–≤.' % count)
                    if a == 1:
                        random.shuffle(koloda)
                        currend = koloda.pop()
                    bot.send_message(chat_id, '–ö–∞—Ä—Ç–∞ –î–∏–ª–ª–µ—Ä–∞ %d' % currend)
                elif choice == '–ü–æ–∂–∞–ª—É–π –ù–µ—Ç':
                    if a > 1:
                        countd += currend
                        while True:
                            if countd < count:
                                random.shuffle(koloda)
                                currend = koloda.pop()
                                countd += currend
                            else:
                                break
                        bot.send_message(chat_id, '–£ –≤–∞—Å %d –æ—á–∫–æ–≤.' % count)
                        bot.send_message(chat_id, '–£ –î–∏–ª–ª–µ—Ä–∞ %d –æ—á–∫–æ–≤.' % countd)
                        if countd > count:
                            if countd > 21:
                                bot.send_message(chat_id, "–£ –î–∏–ª–ª–µ—Ä–∞ –æ—á–∫–æ–≤ > 21, –í—ã –ø–æ–±–µ–¥–∏–ª—Ç)")
                                goto_menu(chat_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
                                break
                            bot.send_message(chat_id, "–£ –î–∏–ª–ª–µ—Ä–∞ –±–æ–ª—å—à–µ –æ—á–∫–æ–≤, –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏(")
                            goto_menu(chat_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
                        elif count > countd:
                            bot.send_message(chat_id, "–£ –í–∞—Å –±–æ–ª—å—à–µ –æ—á–∫–æ–≤, –í—ã –ø–æ–±–µ–¥–∏–ª–∏)")
                            goto_menu(chat_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
                        elif count == count:
                            bot.send_message(chat_id, "–ù–∏—á—å—è")
                            goto_menu(chat_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
                        break

                    else:
                        goto_menu(chat_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
                        break
                elif choice == '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É' or "<--–ù–∞–∂–∏–º–∞–π" or "–ù–∞–∂–∏–º–∞–π-->":
                    bot.send_message(chat_id, "–°–µ–π—á–∞—Å —ç—Ç–∏ –∫–Ω–æ–ø–∫–∏ –Ω–µ –ø—Ä–∏–≥–æ–¥—è—Ç—Å—è(–¥–∞-–¥–∞, –ê–≤—Ç–æ—Ä –æ—á–µ–Ω—å –ª–µ–Ω–∏–≤—ã–π)")

                else:
                    bot.send_message(chat_id, "–Ω–µ –≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
                    goto_menu(chat_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
                    break

    else:
        bot.send_message(chat_id, text="–ú–Ω–µ –∂–∞–ª—å, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—à—É –∫–æ–º–∞–Ω–¥—É:" + ms_text)
        goto_menu(chat_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")


@bot.callback_query_handler(func=lambda call: True)
def callback_worker(call):
    pass
    if call.data == "ManorNot_GoToSite":
        bot.answer_callback_query(call.id)


def goto_menu(chat_id, name_menu):
    cur_menu = Menu.getCurMenu(chat_id)
    if name_menu == "‚¨Ö –í—ã—Ö–æ–¥" and cur_menu != None and cur_menu.parent != None:
        target_menu = Menu.getMenu(chat_id, cur_menu.parent.name)
    else:
        target_menu = Menu.getMenu(chat_id, name_menu)

    if target_menu != None:
        bot.send_message(chat_id, text=target_menu.name, reply_markup=target_menu.markup)

        if target_menu.name == "–ò–≥—Ä–∞ –≤ 21":
            global game21
            game21 = BotGames.newGame(chat_id, BotGames.Game21(jokers_enabled=True))
            text_game = game21.get_cards(2)
            bot.send_media_group(chat_id, media=getMediaCards(game21))
            bot.send_message(chat_id, text=text_game)

        elif target_menu.name == "–ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞":
            gameRPS = BotGames.newGame(chat_id, BotGames.GameRPS())
            text_game = "<b>–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –ø—Ä–∞–≤–∏–ª–∞–º: </b>\n" \
                        "1. –ö–∞–º–µ–Ω—å > –ù–æ–∂–Ω–∏—Ü—ã\n" \
                        "2. –ë—É–º–∞–≥–∞ > –ö–∞–º–µ–Ω—å\n" \
                        "3. –ù–æ–∂–Ω–∏—Ü—ã > –ë—É–º–∞–≥–∞"
            bot.send_photo(chat_id,
                           photo="https://media.istockphoto.com/photos/rock-paper-scissors-game-set-picture-id162675736",
                           caption=text_game,
                           parse_mode='HTML')
        return True
    else:
        return False


def getMediaCards(game21):
    medias = []
    for url in game21.arr_cards_URL:
        medias.append(types.InputMediaPhoto(url))
    return medias


def send_help(chat_id):
    global bot
    bot.send_message(chat_id, "–ê–≤—Ç–æ—Ä: –ú–∏—Ö–∞–∏–ª –î–∞–Ω–∏–ª–æ–≤")
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton(text="–ù–∞–ø–∏—à–∏—Ç–µ –∞–≤—Ç–æ—Ä—É",
                                      url="https://t.me/daanilovm")
    markup.add(btn1)
    img = open("photo.jpg", 'rb')
    bot.send_photo(chat_id, img, reply_markup=markup)


def send_film(chat_id):
    film = get_randomFilm()
    info_str = f"<b>{film['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ']}</b>\n" \
               f"–ì–æ–¥: {film['–ì–æ–¥']}\n" \
               f"–°—Ç—Ä–∞–Ω–∞: {film['–°—Ç—Ä–∞–Ω–∞']}\n" \
               f"–ñ–∞–Ω—Ä: {film['–ñ–∞–Ω—Ä']}\n" \
               f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {film['–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å']}"
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton(text="–¢—Ä–µ–π–ª–µ—Ä", url=film["–¢—Ä–µ–π–ª–µ—Ä_url"])
    btn2 = types.InlineKeyboardButton(text="–°–ú–û–¢–†–ï–¢–¨ –æ–Ω–ª–∞–π–Ω", url=film["–§–∏–ª—å–º_url"])
    markup.add(btn1, btn2)
    bot.send_photo(chat_id, photo=film['–û–±–ª–æ–∂–∫–∞_url'], caption=info_str, parse_mode='HTML', reply_markup=markup)


def get_randomFilm():
    url = 'https://randomfilm.ru/'
    infoFilm = {}
    req_film = requests.get(url)
    soup = bs4.BeautifulSoup(req_film.text, "html.parser")
    result_find = soup.find('div', align="center", style="width: 100%")
    infoFilm["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ"] = result_find.find("h2").getText()
    names = infoFilm["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ"].split(" / ")
    infoFilm["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ_rus"] = names[0].strip()
    if len(names) > 1:
        infoFilm["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ_eng"] = names[1].strip()

    images = []
    for img in result_find.findAll('img'):
        images.append(url + img.get('src'))
    infoFilm["–û–±–ª–æ–∂–∫–∞_url"] = images[0]
    details = result_find.findAll('td')
    infoFilm["–ì–æ–¥"] = details[0].contents[1].strip()
    infoFilm["–°—Ç—Ä–∞–Ω–∞"] = details[1].contents[1].strip()
    infoFilm["–ñ–∞–Ω—Ä"] = details[2].contents[1].strip()
    infoFilm["–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"] = details[3].contents[1].strip()
    infoFilm["–†–µ–∂–∏—Å—Å—ë—Ä"] = details[4].contents[1].strip()
    infoFilm["–ê–∫—Ç—ë—Ä—ã"] = details[5].contents[1].strip()
    infoFilm["–¢—Ä–µ–π–ª–µ—Ä_url"] = url + details[6].contents[0]["href"]
    infoFilm["–§–∏–ª—å–º_url"] = url + details[7].contents[0]["href"]
    return infoFilm


def get_anekdot():
    array_anekdots = []
    req_anek = requests.get('http://anekdotme.ru/random')
    if req_anek.status_code == 200:
        soup = bs4.BeautifulSoup(req_anek.text, "html.parser")
        result_find = soup.select('.anekdot_text')
        for result in result_find:
            array_anekdots.append(result.getText().strip())
    if len(array_anekdots) > 0:
        return array_anekdots[0]
    else:
        return ""


def get_dogURL():
    url = ""
    req = requests.get('https://random.dog/woof.json')
    if req.status_code == 200:
        r_json = req.json()
        url = r_json["url"]
    return url


def get_nickname():
    array_names = []
    req_names = requests.get("https://ru.nickfinder.com")
    soup = bs4.BeautifulSoup(req_names.text, "html.parser")
    result_find = soup.findAll(class_='one_generated_variant vt_df_bg')
    for result in result_find:
        array_names.append(result.getText())
        return array_names[0]


def get_game():
    contents = requests.get('https://gamechart-app-default-rtdb.europe-west1.firebasedatabase.app/GameName.json').json()
    b = []
    for (k, v) in contents.items():
        b.append(k)
    game = b[random.randint(0, len(b))]
    return game


def get_anime():
    req_anime = requests.get('https://manga-chan.me/manga/random')
    soup = bs4.BeautifulSoup(req_anime.text, "html.parser")
    result_find = soup.find("div", class_="content_row")

    result_find_name = result_find.find("h2")

    array_anime_in = []
    result_find_in = result_find.find("div", class_="tags")

    im = []
    for img in result_find.findAll("img"):
        im.append(img.get("src"))
    return result_find_name, result_find_in, im


def get_eth():
    global a
    url = requests.get('https://mainfin.ru/crypto/ethereum')
    b = bs4.BeautifulSoup(url.text, "html.parser")
    url1 = b.select(".crypto_curr_val")
    url_print = url1[0].getText()
    a = '–°—Ä–µ–¥–Ω–µ–≤–∑–≤–µ—à–µ–Ω–Ω—ã–π –∫—É—Ä—Å\nETH - '
    a = str(a + url_print)
    return a


def get_gas():
    global d
    url = requests.get('https://etherchain.org/tools/gasnow')  # –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º url
    b = bs4.BeautifulSoup(url.text, "html.parser")
    url1 = b.select(".info-item-body")
    url_print = url1[0].getText()
    d = str(url_print)
    return d


bot.polling(none_stop=True, interval=0)

print()
